package model

// !!! DO NOT EDIT THIS FILE

import (
	"context"
	"encoding/json"
	"github.com/iancoleman/strcase"
	"github.com/mylxsw/coll"
	"github.com/mylxsw/eloquent/query"
	"gopkg.in/guregu/null.v3"
	"time"
)

func init() {

}

// Journal is a Journal object
type Journal struct {
	original     *journalOriginal
	journalModel *JournalModel

	Id            null.Int
	Action        null.String
	Params        null.String
	TriggerUserId null.Int
	CreatedAt     null.Time
}

// As convert object to other type
// dst must be a pointer to struct
func (inst *Journal) As(dst interface{}) error {
	return coll.CopyProperties(inst, dst)
}

// SetModel set model for Journal
func (inst *Journal) SetModel(journalModel *JournalModel) {
	inst.journalModel = journalModel
}

// journalOriginal is an object which stores original Journal from database
type journalOriginal struct {
	Id            null.Int
	Action        null.String
	Params        null.String
	TriggerUserId null.Int
	CreatedAt     null.Time
}

// Staled identify whether the object has been modified
func (inst *Journal) Staled(onlyFields ...string) bool {
	if inst.original == nil {
		inst.original = &journalOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			return true
		}
		if inst.Action != inst.original.Action {
			return true
		}
		if inst.Params != inst.original.Params {
			return true
		}
		if inst.TriggerUserId != inst.original.TriggerUserId {
			return true
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			return true
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					return true
				}
			case "action":
				if inst.Action != inst.original.Action {
					return true
				}
			case "params":
				if inst.Params != inst.original.Params {
					return true
				}
			case "trigger_user_id":
				if inst.TriggerUserId != inst.original.TriggerUserId {
					return true
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					return true
				}
			default:
			}
		}
	}

	return false
}

// StaledKV return all fields has been modified
func (inst *Journal) StaledKV(onlyFields ...string) query.KV {
	kv := make(query.KV, 0)

	if inst.original == nil {
		inst.original = &journalOriginal{}
	}

	if len(onlyFields) == 0 {

		if inst.Id != inst.original.Id {
			kv["id"] = inst.Id
		}
		if inst.Action != inst.original.Action {
			kv["action"] = inst.Action
		}
		if inst.Params != inst.original.Params {
			kv["params"] = inst.Params
		}
		if inst.TriggerUserId != inst.original.TriggerUserId {
			kv["trigger_user_id"] = inst.TriggerUserId
		}
		if inst.CreatedAt != inst.original.CreatedAt {
			kv["created_at"] = inst.CreatedAt
		}
	} else {
		for _, f := range onlyFields {
			switch strcase.ToSnake(f) {

			case "id":
				if inst.Id != inst.original.Id {
					kv["id"] = inst.Id
				}
			case "action":
				if inst.Action != inst.original.Action {
					kv["action"] = inst.Action
				}
			case "params":
				if inst.Params != inst.original.Params {
					kv["params"] = inst.Params
				}
			case "trigger_user_id":
				if inst.TriggerUserId != inst.original.TriggerUserId {
					kv["trigger_user_id"] = inst.TriggerUserId
				}
			case "created_at":
				if inst.CreatedAt != inst.original.CreatedAt {
					kv["created_at"] = inst.CreatedAt
				}
			default:
			}
		}
	}

	return kv
}

// Save create a new model or update it
func (inst *Journal) Save() error {
	if inst.journalModel == nil {
		return query.ErrModelNotSet
	}

	id, _, err := inst.journalModel.SaveOrUpdate(*inst)
	if err != nil {
		return err
	}

	inst.Id = null.IntFrom(id)
	return nil
}

// Delete remove a journal
func (inst *Journal) Delete() error {
	if inst.journalModel == nil {
		return query.ErrModelNotSet
	}

	_, err := inst.journalModel.DeleteById(inst.Id.Int64)
	if err != nil {
		return err
	}

	return nil
}

// String convert instance to json string
func (inst *Journal) String() string {
	rs, _ := json.Marshal(inst)
	return string(rs)
}

type journalScope struct {
	name  string
	apply func(builder query.Condition)
}

var journalGlobalScopes = make([]journalScope, 0)
var journalLocalScopes = make([]journalScope, 0)

// AddGlobalScopeForJournal assign a global scope to a model
func AddGlobalScopeForJournal(name string, apply func(builder query.Condition)) {
	journalGlobalScopes = append(journalGlobalScopes, journalScope{name: name, apply: apply})
}

// AddLocalScopeForJournal assign a local scope to a model
func AddLocalScopeForJournal(name string, apply func(builder query.Condition)) {
	journalLocalScopes = append(journalLocalScopes, journalScope{name: name, apply: apply})
}

func (m *JournalModel) applyScope() query.Condition {
	scopeCond := query.ConditionBuilder()
	for _, g := range journalGlobalScopes {
		if m.globalScopeEnabled(g.name) {
			g.apply(scopeCond)
		}
	}

	for _, s := range journalLocalScopes {
		if m.localScopeEnabled(s.name) {
			s.apply(scopeCond)
		}
	}

	return scopeCond
}

func (m *JournalModel) localScopeEnabled(name string) bool {
	for _, n := range m.includeLocalScopes {
		if name == n {
			return true
		}
	}

	return false
}

func (m *JournalModel) globalScopeEnabled(name string) bool {
	for _, n := range m.excludeGlobalScopes {
		if name == n {
			return false
		}
	}

	return true
}

type JournalPlain struct {
	Id            int64
	Action        string
	Params        string
	TriggerUserId int64
	CreatedAt     time.Time
}

func (w JournalPlain) ToJournal(allows ...string) Journal {
	if len(allows) == 0 {
		return Journal{

			Id:            null.IntFrom(int64(w.Id)),
			Action:        null.StringFrom(w.Action),
			Params:        null.StringFrom(w.Params),
			TriggerUserId: null.IntFrom(int64(w.TriggerUserId)),
			CreatedAt:     null.TimeFrom(w.CreatedAt),
		}
	}

	res := Journal{}
	for _, al := range allows {
		switch strcase.ToSnake(al) {

		case "id":
			res.Id = null.IntFrom(int64(w.Id))
		case "action":
			res.Action = null.StringFrom(w.Action)
		case "params":
			res.Params = null.StringFrom(w.Params)
		case "trigger_user_id":
			res.TriggerUserId = null.IntFrom(int64(w.TriggerUserId))
		case "created_at":
			res.CreatedAt = null.TimeFrom(w.CreatedAt)
		default:
		}
	}

	return res
}

// As convert object to other type
// dst must be a pointer to struct
func (w JournalPlain) As(dst interface{}) error {
	return coll.CopyProperties(w, dst)
}

func (w *Journal) ToJournalPlain() JournalPlain {
	return JournalPlain{

		Id:            w.Id.Int64,
		Action:        w.Action.String,
		Params:        w.Params.String,
		TriggerUserId: w.TriggerUserId.Int64,
		CreatedAt:     w.CreatedAt.Time,
	}
}

// JournalModel is a model which encapsulates the operations of the object
type JournalModel struct {
	db        *query.DatabaseWrap
	tableName string

	excludeGlobalScopes []string
	includeLocalScopes  []string

	query query.SQLBuilder
}

var journalTableName = "journal"

const (
	JournalFieldId            = "id"
	JournalFieldAction        = "action"
	JournalFieldParams        = "params"
	JournalFieldTriggerUserId = "trigger_user_id"
	JournalFieldCreatedAt     = "created_at"
)

// JournalFields return all fields in Journal model
func JournalFields() []string {
	return []string{
		"id",
		"action",
		"params",
		"trigger_user_id",
		"created_at",
	}
}

func SetJournalTable(tableName string) {
	journalTableName = tableName
}

// NewJournalModel create a JournalModel
func NewJournalModel(db query.Database) *JournalModel {
	return &JournalModel{
		db:                  query.NewDatabaseWrap(db),
		tableName:           journalTableName,
		excludeGlobalScopes: make([]string, 0),
		includeLocalScopes:  make([]string, 0),
		query:               query.Builder(),
	}
}

// GetDB return database instance
func (m *JournalModel) GetDB() query.Database {
	return m.db.GetDB()
}

func (m *JournalModel) clone() *JournalModel {
	return &JournalModel{
		db:                  m.db,
		tableName:           m.tableName,
		excludeGlobalScopes: append([]string{}, m.excludeGlobalScopes...),
		includeLocalScopes:  append([]string{}, m.includeLocalScopes...),
		query:               m.query,
	}
}

// WithoutGlobalScopes remove a global scope for given query
func (m *JournalModel) WithoutGlobalScopes(names ...string) *JournalModel {
	mc := m.clone()
	mc.excludeGlobalScopes = append(mc.excludeGlobalScopes, names...)

	return mc
}

// WithLocalScopes add a local scope for given query
func (m *JournalModel) WithLocalScopes(names ...string) *JournalModel {
	mc := m.clone()
	mc.includeLocalScopes = append(mc.includeLocalScopes, names...)

	return mc
}

// Condition add query builder to model
func (m *JournalModel) Condition(builder query.SQLBuilder) *JournalModel {
	mm := m.clone()
	mm.query = mm.query.Merge(builder)

	return mm
}

// Find retrieve a model by its primary key
func (m *JournalModel) Find(id int64) (Journal, error) {
	return m.First(m.query.Where("id", "=", id))
}

// Exists return whether the records exists for a given query
func (m *JournalModel) Exists(builders ...query.SQLBuilder) (bool, error) {
	count, err := m.Count(builders...)
	return count > 0, err
}

// Count return model count for a given query
func (m *JournalModel) Count(builders ...query.SQLBuilder) (int64, error) {
	sqlStr, params := m.query.
		Merge(builders...).
		Table(m.tableName).
		AppendCondition(m.applyScope()).
		ResolveCount()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	defer rows.Close()

	rows.Next()
	var res int64
	if err := rows.Scan(&res); err != nil {
		return 0, err
	}

	return res, nil
}

func (m *JournalModel) Paginate(page int64, perPage int64, builders ...query.SQLBuilder) ([]Journal, query.PaginateMeta, error) {
	if page <= 0 {
		page = 1
	}

	if perPage <= 0 {
		perPage = 15
	}

	meta := query.PaginateMeta{
		PerPage: perPage,
		Page:    page,
	}

	count, err := m.Count(builders...)
	if err != nil {
		return nil, meta, err
	}

	meta.Total = count
	meta.LastPage = count / perPage
	if count%perPage != 0 {
		meta.LastPage += 1
	}

	res, err := m.Get(append([]query.SQLBuilder{query.Builder().Limit(perPage).Offset((page - 1) * perPage)}, builders...)...)
	if err != nil {
		return res, meta, err
	}

	return res, meta, nil
}

// Get retrieve all results for given query
func (m *JournalModel) Get(builders ...query.SQLBuilder) ([]Journal, error) {
	b := m.query.Merge(builders...).Table(m.tableName).AppendCondition(m.applyScope())
	if len(b.GetFields()) == 0 {
		b = b.Select(
			"id",
			"action",
			"params",
			"trigger_user_id",
			"created_at",
		)
	}

	fields := b.GetFields()
	selectFields := make([]query.Expr, 0)

	for _, f := range fields {
		switch strcase.ToSnake(f.Value) {

		case "id":
			selectFields = append(selectFields, f)
		case "action":
			selectFields = append(selectFields, f)
		case "params":
			selectFields = append(selectFields, f)
		case "trigger_user_id":
			selectFields = append(selectFields, f)
		case "created_at":
			selectFields = append(selectFields, f)
		}
	}

	var createScanVar = func(fields []query.Expr) (*Journal, []interface{}) {
		var journalVar Journal
		scanFields := make([]interface{}, 0)

		for _, f := range fields {
			switch strcase.ToSnake(f.Value) {

			case "id":
				scanFields = append(scanFields, &journalVar.Id)
			case "action":
				scanFields = append(scanFields, &journalVar.Action)
			case "params":
				scanFields = append(scanFields, &journalVar.Params)
			case "trigger_user_id":
				scanFields = append(scanFields, &journalVar.TriggerUserId)
			case "created_at":
				scanFields = append(scanFields, &journalVar.CreatedAt)
			}
		}

		return &journalVar, scanFields
	}

	sqlStr, params := b.Fields(selectFields...).ResolveQuery()

	rows, err := m.db.QueryContext(context.Background(), sqlStr, params...)
	if err != nil {
		return nil, err
	}

	defer rows.Close()

	journals := make([]Journal, 0)
	for rows.Next() {
		journalReal, scanFields := createScanVar(fields)
		if err := rows.Scan(scanFields...); err != nil {
			return nil, err
		}

		journalReal.SetModel(m)
		journals = append(journals, *journalReal)
	}

	return journals, nil
}

// First return first result for given query
func (m *JournalModel) First(builders ...query.SQLBuilder) (Journal, error) {
	res, err := m.Get(append(builders, query.Builder().Limit(1))...)
	if err != nil {
		return Journal{}, err
	}

	if len(res) == 0 {
		return Journal{}, query.ErrNoResult
	}

	return res[0], nil
}

// Create save a new journal to database
func (m *JournalModel) Create(kv query.KV) (int64, error) {

	if _, ok := kv["created_at"]; !ok {
		kv["created_at"] = time.Now()
	}

	sqlStr, params := m.query.Table(m.tableName).ResolveInsert(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.LastInsertId()
}

// SaveAll save all journals to database
func (m *JournalModel) SaveAll(journals []Journal) ([]int64, error) {
	ids := make([]int64, 0)
	for _, journal := range journals {
		id, err := m.Save(journal)
		if err != nil {
			return ids, err
		}

		ids = append(ids, id)
	}

	return ids, nil
}

// Save save a journal to database
func (m *JournalModel) Save(journal Journal, onlyFields ...string) (int64, error) {
	return m.Create(journal.StaledKV(onlyFields...))
}

// SaveOrUpdate save a new journal or update it when it has a id > 0
func (m *JournalModel) SaveOrUpdate(journal Journal, onlyFields ...string) (id int64, updated bool, err error) {
	if journal.Id.Int64 > 0 {
		_, _err := m.UpdateById(journal.Id.Int64, journal, onlyFields...)
		return journal.Id.Int64, true, _err
	}

	_id, _err := m.Save(journal, onlyFields...)
	return _id, false, _err
}

// UpdateFields update kv for a given query
func (m *JournalModel) UpdateFields(kv query.KV, builders ...query.SQLBuilder) (int64, error) {
	if len(kv) == 0 {
		return 0, nil
	}

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).
		Table(m.tableName).
		ResolveUpdate(kv)

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()
}

// Update update a model for given query
func (m *JournalModel) Update(journal Journal, builders ...query.SQLBuilder) (int64, error) {
	return m.UpdateFields(journal.StaledKV(), builders...)
}

// UpdatePart update a model for given query
func (m *JournalModel) UpdatePart(journal Journal, onlyFields ...string) (int64, error) {
	return m.UpdateFields(journal.StaledKV(onlyFields...))
}

// UpdateById update a model by id
func (m *JournalModel) UpdateById(id int64, journal Journal, onlyFields ...string) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).UpdateFields(journal.StaledKV(onlyFields...))
}

// Delete remove a model
func (m *JournalModel) Delete(builders ...query.SQLBuilder) (int64, error) {

	sqlStr, params := m.query.Merge(builders...).AppendCondition(m.applyScope()).Table(m.tableName).ResolveDelete()

	res, err := m.db.ExecContext(context.Background(), sqlStr, params...)
	if err != nil {
		return 0, err
	}

	return res.RowsAffected()

}

// DeleteById remove a model by id
func (m *JournalModel) DeleteById(id int64) (int64, error) {
	return m.Condition(query.Builder().Where("id", "=", id)).Delete()
}
